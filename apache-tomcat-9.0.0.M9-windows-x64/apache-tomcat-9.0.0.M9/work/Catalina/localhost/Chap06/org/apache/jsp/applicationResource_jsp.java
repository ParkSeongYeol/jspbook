/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.0.M9
 * Generated at: 2016-08-04 05:45:46 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.*;
import java.net.*;

public final class applicationResource_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.net");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("\t<head>\r\n");
      out.write("\t\t<title>application 내장객체의 서버 자원 정보</title>\r\n");
      out.write("\t</head>\r\n");
      out.write("\t<body>\r\n");
      out.write("\t\r\n");
      out.write("\t\t<h3>절대 경로를 활용하여 applicationResource.txt 사용 </h3>\r\n");
      out.write("\t\t");
 String path1 = "D:\\jspbook\\apache-tomcat-9.0.0.M9-windows-x64\\apache-tomcat-9.0.0.M9\\webapps\\Chap06\\applicationResource.txt"; 
      out.write("\r\n");
      out.write("\t\t<h5>");
      out.print( path1 );
      out.write("</h5>\r\n");
      out.write("\t\t");
		
			BufferedReader bf1 = new BufferedReader(new FileReader(path1));
			String txtMsg1;
			try{
				do{
					txtMsg1 = bf1.readLine();
					if (txtMsg1 != null)
						out.println(txtMsg1 + "<br/>");				
				}while(txtMsg1 != null);
			}catch (Exception e){
				out.println(e.getMessage());
			}finally{
				try{
					bf1.close();
				}catch(Exception e){
					out.println(e.getMessage());
				}
			}	
		
		
      out.write("\r\n");
      out.write("\t\t<hr>\r\n");
      out.write("\t\t<h3>application 내장객체의 getRealPath() 메소드를 활용하여 applicationResource.txt 사용</h3>\r\n");
      out.write("\t\t");
 String path2 = application.getRealPath("/applicationResource.txt"); 
      out.write("\r\n");
      out.write("\t\t<h5>");
      out.print( path2 );
      out.write("</h5>\r\n");
      out.write("\t\t");

			BufferedReader bf2 = new BufferedReader(new FileReader(path2));
			String txtMsg2;
			try{
				do{
					txtMsg2 = bf2.readLine();
					if (txtMsg2 != null)
						out.println(txtMsg2 + "<br/>");				
				}while(txtMsg2 != null);
			}catch (Exception e){
				out.println(e.getMessage());
			}finally{
				try{
					bf2.close();
				}catch(Exception e){
					out.println(e.getMessage());
				}
			}
		
      out.write("\r\n");
      out.write("\t\t<hr>\r\n");
      out.write("\t\t<h3>application 내장객체의 getResource() 메소드를 활용하여 applicationResource.txt 사용</h3>\r\n");
      out.write("\t\t");
 URL path3 = application.getResource("/applicationResource.txt"); 
      out.write("\r\n");
      out.write("\t\t<h5>");
      out.print( path3.getPath() );
      out.write("</h5>\r\n");
      out.write("\t\t");

			BufferedReader bf3 = new BufferedReader(new InputStreamReader(path3.openStream())); 
			String txtMsg3;
			try{
				do{
					txtMsg3 = bf3.readLine();
					if (txtMsg3 != null)
						out.println(txtMsg3 + "<br/>");				
				}while(txtMsg3 != null);
			}catch (Exception e){
				out.println(e.getMessage());
			}finally{
				try{
					bf3.close();
				}catch(Exception e){
					out.println(e.getMessage());
				}
			}
		
      out.write("\r\n");
      out.write("\t\t<hr>\r\n");
      out.write("\t\t<h3>application 내장객체의 getResourceAsStream() 메소드를 활용하여 applicationResource.txt 사용</h3>\r\n");
      out.write("\t\t");
 InputStream path4 = application.getResourceAsStream("/applicationResource.txt"); 
      out.write("\r\n");
      out.write("\t\t");

			BufferedReader bf4 = new BufferedReader(new InputStreamReader(path4)); 
			String txtMsg4;
			try{
				do{
					txtMsg4 = bf4.readLine();
					if (txtMsg4 != null)
						out.println(txtMsg4 + "<br/>");				
				}while(txtMsg4 != null);
			}catch (Exception e){
				out.println(e.getMessage());
			}finally{
				try{
					bf4.close();
				}catch(Exception e){
					out.println(e.getMessage());
				}
			}
		
      out.write("\r\n");
      out.write("\t</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
